"""Add optional metadata columns to content_items

Revision ID: 77771a21927f
Revises: 212dfe6733db
Create Date: 2025-08-26 21:28:06.865972

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '77771a21927f'
down_revision: Union[str, Sequence[str], None] = '212dfe6733db'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('content_items', sa.Column('content', sa.Text(), nullable=True))
    op.alter_column('content_items', 'url',
               existing_type=sa.VARCHAR(length=2048),
               type_=sa.Text(),
               existing_nullable=False)
    op.alter_column('content_items', 'title',
               existing_type=sa.VARCHAR(length=512),
               type_=sa.String(length=500),
               existing_nullable=True)
    op.alter_column('content_items', 'meta_description',
               existing_type=sa.TEXT(),
               type_=sa.String(length=500),
               existing_nullable=True)
    op.alter_column('content_items', 'freshness_source',
               existing_type=sa.VARCHAR(length=32),
               type_=sa.String(length=50),
               existing_nullable=True)
    op.alter_column('content_items', 'first_seen',
               existing_type=sa.DATETIME(),
               nullable=True,
               existing_server_default=sa.text('(CURRENT_TIMESTAMP)'))
    op.alter_column('content_items', 'last_seen',
               existing_type=sa.DATETIME(),
               nullable=True,
               existing_server_default=sa.text('(CURRENT_TIMESTAMP)'))
    op.alter_column('content_items', 'content_hash',
               existing_type=sa.VARCHAR(length=64),
               type_=sa.String(length=128),
               existing_nullable=True)
    op.create_index(op.f('ix_content_items_id'), 'content_items', ['id'], unique=False)
    op.drop_constraint(None, 'content_items', type_='foreignkey')
    op.create_foreign_key(None, 'content_items', 'sites', ['site_id'], ['id'])
    op.alter_column('sites', 'name',
               existing_type=sa.VARCHAR(length=200),
               type_=sa.String(length=255),
               existing_nullable=False)
    op.create_index(op.f('ix_sites_domain'), 'sites', ['domain'], unique=True)
    op.create_index(op.f('ix_sites_id'), 'sites', ['id'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_sites_id'), table_name='sites')
    op.drop_index(op.f('ix_sites_domain'), table_name='sites')
    op.alter_column('sites', 'name',
               existing_type=sa.String(length=255),
               type_=sa.VARCHAR(length=200),
               existing_nullable=False)
    op.drop_constraint(None, 'content_items', type_='foreignkey')
    op.create_foreign_key(None, 'content_items', 'sites', ['site_id'], ['id'], ondelete='CASCADE')
    op.drop_index(op.f('ix_content_items_id'), table_name='content_items')
    op.alter_column('content_items', 'content_hash',
               existing_type=sa.String(length=128),
               type_=sa.VARCHAR(length=64),
               existing_nullable=True)
    op.alter_column('content_items', 'last_seen',
               existing_type=sa.DATETIME(),
               nullable=False,
               existing_server_default=sa.text('(CURRENT_TIMESTAMP)'))
    op.alter_column('content_items', 'first_seen',
               existing_type=sa.DATETIME(),
               nullable=False,
               existing_server_default=sa.text('(CURRENT_TIMESTAMP)'))
    op.alter_column('content_items', 'freshness_source',
               existing_type=sa.String(length=50),
               type_=sa.VARCHAR(length=32),
               existing_nullable=True)
    op.alter_column('content_items', 'meta_description',
               existing_type=sa.String(length=500),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.alter_column('content_items', 'title',
               existing_type=sa.String(length=500),
               type_=sa.VARCHAR(length=512),
               existing_nullable=True)
    op.alter_column('content_items', 'url',
               existing_type=sa.Text(),
               type_=sa.VARCHAR(length=2048),
               existing_nullable=False)
    op.drop_column('content_items', 'content')
    # ### end Alembic commands ###

"""Add optional metadata columns to content_items

Revision ID: 77771a21927f
Revises: 212dfe6733db
Create Date: 2025-08-26 21:28:06.865972
"""
from typing import Sequence, Union, List

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = "77771a21927f"
down_revision: Union[str, Sequence[str], None] = "212dfe6733db"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def _existing_columns(table: str) -> List[str]:
    bind = op.get_bind()
    insp = sa.inspect(bind)
    return [c["name"] for c in insp.get_columns(table)]


def _ensure_add_column(table: str, col: sa.Column) -> None:
    cols = _existing_columns(table)
    if col.name not in cols:
        op.add_column(table, col)


def _ensure_drop_column(table: str, name: str) -> None:
    cols = _existing_columns(table)
    if name in cols:
        op.drop_column(table, name)


def upgrade() -> None:
    """Upgrade schema.

    NOTE:
    - This migration is written to be **backend-safe**.
    - We avoid ALTER TYPE / ALTER COLUMN operations that are problematic on SQLite.
    - We only add columns if they do not already exist.
    """
    table = "content_items"

    # Optional metadata columns we want to ensure exist
    _ensure_add_column(table, sa.Column("status_code", sa.Integer(), nullable=True))
    _ensure_add_column(table, sa.Column("word_count", sa.Integer(), nullable=True))
    _ensure_add_column(table, sa.Column("schema_types", sa.JSON(), nullable=True))
    _ensure_add_column(table, sa.Column("lastmod", sa.DateTime(timezone=True), nullable=True))
    _ensure_add_column(table, sa.Column("date_published", sa.DateTime(timezone=True), nullable=True))
    _ensure_add_column(table, sa.Column("date_modified", sa.DateTime(timezone=True), nullable=True))
    _ensure_add_column(table, sa.Column("freshness_score", sa.Float(), nullable=True))
    _ensure_add_column(table, sa.Column("freshness_source", sa.String(length=50), nullable=True))
    _ensure_add_column(table, sa.Column("first_seen", sa.DateTime(timezone=True), nullable=True))
    _ensure_add_column(table, sa.Column("last_seen", sa.DateTime(timezone=True), nullable=True))
    _ensure_add_column(table, sa.Column("content_hash", sa.String(length=128), nullable=True))
    _ensure_add_column(table, sa.Column("notes", sa.Text(), nullable=True))
    # `content` column already exists in Postgres; if missing in some envs, ensure it:
    _ensure_add_column(table, sa.Column("content", sa.Text(), nullable=True))

    # Do NOT perform type alterations or FK/index changes here to keep it cross-backend safe.


def downgrade() -> None:
    """Downgrade schema by removing the optional metadata columns, if present."""
    table = "content_items"

    for name in [
        "notes",
        "content_hash",
        "last_seen",
        "first_seen",
        "freshness_source",
        "freshness_score",
        "date_modified",
        "date_published",
        "lastmod",
        "schema_types",
        "word_count",
        "status_code",
        "content",  # only drop if we added it in an env where it didn't exist previously
    ]:
        _ensure_drop_column(table, name)